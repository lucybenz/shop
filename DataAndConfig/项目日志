                    电商项目
准备工作:
① 在thinkphp的目录基础上完善目录结构
② 创建商品后台,导入静态文件
    a.创建控制器
    b.创建对应的view,每个去除掉controller控制器名对应一个视图文件名  goodsController->  View/Goods
    c.把与操作方法名对应的html文件放入视图中
    d. 在Public/Admin/放入对应的静态文件
    e.修改视图中,和css文件中的路径位置 __PUBLIC__代表tp框架中的public目录,tp自带的常量
一丶完成一个商品控制器  GoodsController.class.php
    a.创建goods表,表名和控制器名对应 ,前缀使用wwh_ ,在db.sql中写入sql语句,数据库名为wwh_shop
    b.在common/conf/config.php中完成数据库的链接 使用pdo链接,效率更高
        在thinkPHP3.2.3中 数据库连接类型统一写mysql,内部由pdo封装
    c.关于钩子函数 _before_insert(),在add()操作之前调用,两个方法都属于model中的方法
        在其中完成对数据的二次制作,如图片上,略缩图,和添加时间,略缩图要从大到小制作
      图片上传的判断应该 为 图片名称 !== ''就接收上传文件进行判断,以防止用户上传错误文件却导致了添加成功
    d.完善goodscontroller
④ 在线编辑器的制作(js)
    a.把在线编辑器文件放入public目录中
    b.在goodsAdd中引入文件
    c.
    //实例化方法,以及调节宽和高,如果不记得在标签处添加style也是可以的
    <script type="text/javascript">
          var um = UM.getEditor('goods_desc',{
              initialFrameWidth:"100%",
              initialFrameHeight:"350",
          });
      </script>
⑤将筛选转义文件放入跟目录
    a.过滤操作会经常使用到,因此最好的方法是定义一个过滤函数,在需要的地方调用它,而在tp中,common文件夹中拥有一个函数库文件
        用来存放自定义函数
    b.过滤函数在过来 goods_desc字段时,不使用I("post.goods_desc",'I函数的第二个参数当接收的值空时接收的默认值'),因为其不能选择性过滤
        而直接使用 $_POST函数接收用户提交的goods_desc字段,然后 使用 removeXSS接收改字段,执行选择过滤
    c.函数定义在  common/common/function.php  中可以使得前台和后台都进行调用,函数库文件名一定要定义成 function.php才能够被调用
    d.定义 removeXSS函数时,在执行过滤处 需要手动 return返回数据
⑥关于I()函数
    a.I("post.goods_desc",'I函数的第二个参数当接收的值空时接收的默认值')
    b. I函数默认使用的过滤函数为 htmlspecialchars,可以在配置文件中, 改成:

     'DEFAULT_FILTER'        =>  'trim,htmlspecialchars', // 默认参数过滤方法 用于I函数... ,trim的作用是去除左右空格

    这样执行转义的同时也会去除掉接收的文本域两端的空格
⑥关于略缩图的制作 
    打开一张图片可以制作多张略缩图,但是要按从大到小的顺序制作
    例如: 
    $image->open('./Public/Uploads/'.$goods_img); //服务器中的地址,相对于入口文件
    // 按照原图的比例生成4张略缩图 , 一定要按从大到小生成,否则会错误
    $image->thumb(700, 700)->save('./Public/Uploads/'.$mbig_goods_img);
    $image->thumb(350, 350)->save('./Public/Uploads/'.$big_goods_img);
    $image->thumb(130, 130)->save('./Public/Uploads/'.$mid_goods_img);
    $image->thumb(50, 50)->save('./Public/Uploads/'.$sm_goods_img);

二丶商品列表展示界面的制作  goodsList.html
    a.完成分页效果  控制器中只需要获得数据就行了,具体的数据全部在模型中完成,控制器中只需要少量的代码
    b.完成图片展示效果
        一定是绝对路径,即硬盘中的路径,相对于 localhost,因为站点在WWW目录,所以图片地址应该为
        /wwh_shop/Public/Uploads/<?php echo $v['sm_goods_img']; ?>
        实际地址是:
        http://localhost/wwh_shop/Public/Uploads/Goods/2016-11-29/sm_583d76a2481c1.jpg
    c.完成商品列表页搜索框的制作
        1.在goodslist界面完成搜索表单,传输到本界面,但是不能带页码的get参数,否则会有页码,导致显示错误,所以
            action="__ACTION__" 即可,method的方式一定要为get,post会造成每次刷新从新提交的麻烦,很难处理
        2.在search()方法中完成对 get参数的接收和where条件的制作
            在url中的get参数需要先接收再赋值给变量,后续就无需拼接字符串了
            ps: ios字段的接收,因为其值有 1,0,和空  所以判断时要用全等或者全不等,否则 空和0会转义成同一种类型
            where()条件的两种写法
             (1)$map['name'] = 'thinkphp';
                $map['status'] = 1;
                // 把查询条件传入查询方法
                $User->where($map)->select();
                最后生成的SQL语句是
                SELECT * FROM think_user WHERE `name`='thinkphp' AND status=1
             (2)$map['字段1']  = array('表达式','查询条件1');
                $map['字段2']  = array('表达式',array('条件1','条件2'));
                $User->where($map)->select();
    d.完成排序按钮的制作
        1.制作排序表单, 四个单选按钮,分别是 以时间升降序 和以商品价格升降序 .值得注意的是,添加时间其实和
            商品id是对应关系
        2.表单判断 ,接收判断用户提交的来的 paixu 字段的值,然后根据值来拼接$order 来完成order($order)中所需要的排序参数
            $order需要一个默认值,空白即可,填 goods_id desc等排序要求也可以
优化1:分页的美化
    a在分页对象下调用setConfig()完成
    b 在配置  $Page->setConfig('last','末页'); 时要注意修改 $Page->lastSuffix = false; // 最后一页是否显示总页数 修改
            为false才能显示末页数
    c 而首页和末页只有在页数达到配置的页数时才会显示
    d 分页样式设置
优化2:选中高亮
    a.在 Public/Admin/Js/tron.js 中使用jquery定义一个鼠标移入事件和一个鼠标移开事件
    b.一定要先引入jquery文件再引入tron.js文件   注意~!
    c. find('tr')是查找一个jq对象下的所有的tr标签,不分层次
三. 商品修改界面的制作  goodsEdit.html
    重点: 关于php内部的路径和在用户HTML界面显示的路径的理解
    goodsEdit($goods_id){}这样可以得到在get参数中  goods_id的值,一定要和get参数对应,以便后续调用, delete($goods_id)同理
    ①复制一份goodsAdd()的代码,其中create方法的第二个参数设置为2,代表是更新操作的所需验证
    ②add方法改为 save()
    ③关于更新成功的判断 要用 不全等 !== 因为更新成功会返回受影响的记录条数,但如果用户没有更改会返回0,如果用!= 会被转义为false
    ④在模型的允许更新字段中要加入  id 字段
    ⑤更新之前的钩子函数和添加的钩子函数大致相同,但不需要维护插入时间的数据
    ⑥如果用户新添加了图片,则在用户的插入图片和略缩图插入成功之后,删除原来的图片和略缩图
        a.首先从数据库中取出路径  $this->filed('字段1,字段2...')->find($id); //id可以在钩子函数的实参 options中的where中取出
            $options['where']['goods_id']
        b.删除图片操作属于php内部,即服务器内部的操作,因此要是要使用相对路径,相对于入口文件 index.php

    ⑦商品删除  delete($goods_id)
    d调用方法 $model->delete($goods_id);
        delete方法的返回值是删除的记录数，如果返回值是false则表示SQL出错，返回值如果为0表示没有删除任何数据。
        最好用全等于
    同样要删除服务器中的图片和略缩图
四. 页头页脚的模板制作  , tp会自动在View中读取模板,因此把包含页头和页脚的模板界面layout.html放入到view中

    把模板中需要变动的数据 比如 title标题,url等用变量表示  ,在操作方法中 分配每个使用了布局界面的的html界面所需要的数据
    比如
    //分配模板通用数据
              $this->assign(array(
                  'title' => '商品修改',
                  'url_name' => '商品列表',
                  'url' => U('goodsList'),
              ));
    布局界面中使用 {__CONTENT__}规定调用该布局的模板界面所在位置
五.  图片上传的优化
    ① 把图片的配置放入到配置文件中,方便以后的修改,灵活性高 可以用C()读取配置文件
    ②把显示图片的功能封装成一个函数,如果项目有变动,只需要修改配置文件即可
        showImage('图片路径 Goods/日期...',宽,高)方法封装了 img标签
    ③封装一个uploadOne函数用来上传一张图片并生成缩略图，使用这个函数修改我们添加商品的功能：
        uploadOne('表单中的字段名/与数据库中的字段名保持一致','二级目录名',array(
            array(500,500),
            array(50,50), //略缩图制作
        ))
    ④封装一个 deleteImage(array),传入一个数据库中查找到的数组即可,该方法只需要用到 $value ,所以无所谓是关联数组还是索引数组
     所以deleteImage(array(
       				I('post.old_logo'),
       			));
       			这样传递一个索引数组是没有问题的
六. 使用Gii代码生成
     ①创建表
     ②根据表生成配置文件,浏览配置文件进行修改
     ③根据配置文件生成代码,对代码进行浏览和修改,比如视图界面的显示图片,及jquery文件的引入,翻页的的table加上class
     ④删除处的 delete()接收的id 修改 为 delete(I('get.brand_id'))
七. goods和brand表的连表查询
    ①因多次用到下拉框,所以封装一个显示下拉框函数 showSelect
    function showSelect($tabName,$tableName,$filedID,$filedName,$selectedID=''){
        //select标签的name,需要实例化模型的表名, option标签的value值,option的显示值,下拉框中默认显示的项
    ②修改 goodsAdd()
      a.修改添加表单
      b.修改修改表单,增加品牌下拉框
    ③在goodsList中显示brand_name
      a.用到外联查询,内联会造成没有品牌的商品不显示
      b.修改goodslist表单,增加一个字段显示brand_name
      c.给goods_list的搜索域增加一个品牌的搜索
      d.where条件是数组格式怎么进行多表查询???????????????????????????????????????????????????
      解决:  正常写法即可
        fetchSql()可以用在 select等执行语句的前面,用来返回sql语句,对于错误的sql语句非常实用!

八. 多对多的实现  会员级别表->会员价格表->商品表
    ①创建会员级别表 member_level 和会员价格表 member_price(中间表)
    ②使用代码生成器生成 member表的代码,注意修改delete()方法接收的表单
    ③在goodsAdd方法中添加会员价格一项
        a.修改add表单
        b.接收表单,先打印数据
            ["member_price"] => array(4) {
                [1] => string(4) "2424"
                [2] => string(3) "200"
                [3] => string(3) "100"
                [4] => string(2) "88"
              }
    ④会员价格插入逻辑分析
          a.会员价格要插入到会员价格表中, 会员价格表的字段有 会员级别,对应数组的key值
            会员价格,对应上面数组中的value,goods_id,要等商品数据插入到数据库中得到
            刚刚插入的数据Id,而在$model->add()插入成功之后会进入到
            钩子函数  _after_insert($data,$options)
            钩子函数的两个参数的值分别为
            array(8) { //$data中返回刚刚插入的记录的值,因为已经插入到数据库中了,所以对$data的修改
                        //没有任何意义,所以参数$data的前面不需要加&的符号
              ["brand_id"] => int(1)
              ["goods_name"] => string(7) "小妮3"
              ["market_price"] => string(3) "344"
              ["shop_price"] => string(3) "300"
              ["is_onsale"] => string(1) "1"
              ["goods_desc"] => string(0) ""
              ["addtime"] => string(19) "2016-12-01 19:47:56"
              ["goods_id"] => string(2) "39"
            }
            array(2) { //option中依旧返回 正在操作的表名,和当前所在模型
              ["table"] => string(9) "wwh_goods"
              ["model"] => string(5) "goods"
            }
          b.在钩子函数中,根据刚刚插入的$data['goods_id'],以及用户提交的post数据中的member_price
            维护出会员价格表中的数据
    ⑤会员价格的修改
        a.维护edit表单,取出会员等级和取出对应goods_id对应的会员价格数据
            在修改表单中  会员等级表和会员价格表中对应的应该是, level_id, 所以要根据level_id取出
            对应的 member_price放入到input框的value中这里可以进行三表联合查询
            sql语句为
        $sql = SELECT b.goods_id,c.level_name,c.level_id,b.member_price
               FROM wwh_goods a
               LEFT JOIN wwh_member_price b ON a.goods_id=b.goods_id
               LEFT JOIN wwh_member_level c ON b.level_id=c.level_id
               WHERE a.goods_id=40;
            把得到的数据分配到 goodsEdit.html中即可得到表单,
         这里不这样做,使用类似子查询的做法,根据goods_id得到 会员价格 效果如下
         array(4) {
           [0] => array(3) {
             ["goods_id"] => string(2) "40"
             ["level_id"] => string(1) "1"
             ["member_price"] => string(7) "2424.00"
           }
           [1] => array(3) {
             ["goods_id"] => string(2) "40"
             ["level_id"] => string(1) "2"
             ["member_price"] => string(6) "200.00"
           }
           [2] => array(3) {
             ["goods_id"] => string(2) "40"
             ["level_id"] => string(1) "3"
             ["member_price"] => string(6) "100.00"
           }
           [3] => array(3) {
             ["goods_id"] => string(2) "40"
             ["level_id"] => string(1) "4"
             ["member_price"] => string(5) "88.00"
           }
         }
        可以看到,因为一个商品id对应多个会员价格,所以得到一个这样的二维数组,然后使用这个数组和会员级别
        进行联合判断,  即 从会员级别表中循环取出level_id和二维数组中的level_id对应
        但是,二维数组的索引其实是很难判断两个id是否相等的, 比如$mp_data['0']['level_id']
       中只有一个level_id,如果不是则要判断$mp_data['1']['level_id']中的是否满足,以此类推,相当麻烦


       如果把二维数组转换成一维数组, 可以很轻易的找出比如  $mp_data['level_id'] = 1;的项,
        得到的新数组为
            array(4) { //key为level_id,value为 member_price
               [1] => string(7) "2424.00"
               [2] => string(6) "200.00"
               [3] => string(6) "100.00"
               [4] => string(5) "88.00"
             }
      在edit表单中input框应该是这样的
      name="member_price[<?php echo $v['level_id']; ?>]"
       value="<?php echo $mp_data[$v['level_id']]?>" size="10" /><br>
       b.在goods表save()的_before_update()中,对会员价格进行一个修改 ?

发现问题: 多次点击确定会多次提交表单,造成数据的重复插入 ???????????????????????????????????????????????????????????/
        c.在删除商品时,对会员价格进行删除,方法同修改,使用钩子方法  _before_delete()

    ⑥商品添加和修改界面美化,添加js效果
    ⑦商品修改界面界面的js效果,注意不要误删了 <input type="hidden" name="goods_id" value="<?php echo $data['goods_id'];?>">
        因为save()方法中需要主键id,否则无法完成更新操作

九.商品相册的实现
                                        需求：
                                        1. 相册中每个图片生成三个缩略图
                                        50*50，  350*350， 650*650
                                        2. 修改图片时删除使用AJAX的技术实现无刷新删除
    ① 建表
    ②在添加商品的相片相册中添加一个按钮,叫添加相册按钮,点击按钮生成一个input标签
    ③在添加商品之后得到用户添加的商品相册,添加到商品相册表中
        接收到的数据如下,即使只添加一张图片,依旧是一个一维数组
        array(5) {
          ["name"] => array(3) {
            [0] => string(16) "Water lilies.jpg"
            [1] => string(16) "Water lilies.jpg"
            [2] => string(10) "Winter.jpg"
          }
          ....
          ["error"] => array(3) {
            [0] => int(0)
            [1] => int(0)
            [2] => int(0)
          }
        .....
        }
       是否接收图片的判断应该这样做
       $_FILES['pic'][error][0] == 0
       关键是对 $_FILES['pic']这个数组的重新赋值
    ④商品修改时对商品相册的修改操作  修改图片时删除使用AJAX的技术实现无刷新删除
       a.首先从数据库中循环取出相册 每个图片的后面加上一个删除按钮
       b.修改代码和添加相册时代码相同,复制即可
问题:  要及时复习文档  js,json,jquery ?????????????????????????????????????????????????????//
    ⑤删除商品的同时删除商品相册
        a.关键点
       //删除本地服务器中的相册 where条件这样写是因为tp框架内部在拼接where条件时会进行sql的过滤
        $gp_data = $model->field('pic,big_pic,mid_pic,sm_pic')->where(array('goods_id'=>array('eq',$goods_id)))->select();
/****************************************************************第三天任务已完成**********************************************/


                                商品分类设计
 ①建立商品分类表  goods_category
 ②修改分类添加 下拉框格式
   a.关键 递归排序
       A($i++); A(++$i); A($i+1);
       特别注意: 在递归函数实参处使用++i和 i++ 和 i+1的区别
       可以看出 $i++作为形参时, 递归调用$i++时,只使用到了 $i的值, 即先被使用,再$i再递增.
       关键是, ++$i是对$i的从新赋值,影响是内部和外部的,当递归回来时会发现,曾经的$i = 2,已经变成了$i=3;
       而$i+1,只是简单的给了一个值给形参而已,比如 A(2)而已,所以并不会影响调用函数的外部

      递归排序函数如下
                function tree($arr,$pid = 0,$level = 0){
                   $data = array();
                   foreach ($arr as $k => $v){
                       if( $v['pid'] == $pid ){ //这里是先存储再继续递归寻找
                           $v['levle'] = $level;
                           $data[] = $v;
                           //如果中很多找完一组了,return回来的值如何保存起来?
                           $data=array_merge($data,tree($arr,$v['cat_id'],$level+1)); //应该有个返回值,应该被接收起来才行
                       }
                   }
                   return $data;
                }
  b. 实现下拉框的缩进  使用函数 string str_repeat ( string $input , int $multiplier )

    //echo输出处可以解析函数
  c.edit表单处理,效果同添加,但有默认值 $data['pid'] = $v['cat_id']
    关键: 修改的分类不能是当前分类和当前分类的子分类,否则会造成数据结构出错,因此在修改表单中直接不显示即可
  d.完成分类展示界面 lst
  e.完成分类的删除
    删除时检查是否有子分类,将子分类一并删除
    删除的三种方法
                方法一:
                $this->delete($cat_ids);*/
                //这样删除会循环调用钩子方法,知道 cat_data为array(0)为止,即cat_ids为空,而当cat_ids为空时
                //出现tp框架的误删机制->为了避免错删数据，如果没有传入任何条件进行删除操作的话，不会执行删除操作，例如：

                方法二:调用父类model方法中delete(),这样就不会存在理论上的死循环,也就是增加删除效率
                /*$model = new \Think\Model('catgory'); //这样走的是父类的构造方法
                   $model = M('catgory');这样走的也是父类的构造方法,推荐使用这种,比较简单
                $model->delete($cat_ids); //会调用父类的钩子方法,而子类并没有继承父类的钩子方法,不会造成循环删除*/
        问题:  为什么$model = new \Think\Model();  无法调用删除方法???????????????????????????????????????????????????/
                方法三: 推荐  因为 $option['where']中存储的是delelet方法将要删除的id,因此我们把子类的id也加进去就好了,
                    但是批量删除中,$option的值发生了变化,
                    array(3) {
                          ["where"] => array(1) {
                            ["cat_id"] => array(2) {
                              [0] => string(2) "IN"
                              [1] => string(7) "1,2,3,4"
                            }
                          }
                          ["table"] => string(12) "wwh_category"
                          ["model"] => string(8) "category"
                        }因此我们要根据这个进行修改
                    关键点,想要修改 tp底层的$option的值需要 在传递参数的 &引用传递才行





 ③完成商品添加时的分类选择
                 需求：
                 1. 一件商品必须属于一个主分类         【一对多】
                 2. 一件商品可以同时属于多个扩展分类   【多对多】
  先完成需求1.
     a.给goods表添加一个主分类字段, cat_id
     b.添加商品时,增加一个选择分类字段,结构类似于添加分类
     c.商品编辑处的分类添加
     d.完成商品界面的主分类搜索

  完成需求2.
     a.建表 goods_cat表
     b.在addlist添加扩展属性栏
     c.完成入库操作
     d.商品列表页展示扩展分类, 关键1: 三表连表操作 关键2:数据库函数:group_concat(e.cat_name SEPARATOR "<br/>")
        第一个参数是字段名,第二个参数是连接字符串,默认为',' 把被分组压缩到一起的字段名用 , 连接起来

     e.修改操作 基本思路是先删除所有,在更新扩展分类
     f.删除操作
     e.搜索窗口的制作, 查找一个分类,会找出该分类作为主分类时,及该分类子分类的的商品,和他们作为扩展分类时的商品
 /*************************************************第四天任务完成***********************************************************************/
---------------------------书签


九. 商品属性管理
    ①建表
         a.属性类型表(attr_type),服务于添加商品时,选择该商品所对应的扩展属性 ,对应的,商品表中应该添加一个字段用来保存商品的属性类型
            类型ID 类型名称
            1       手机
         b.属性表(attribute) 用来存储每种属性的信息
            属性ID  属性名称  属性类型       可选值 attr_option_value         类型ID
            1        颜色      可选      蓝色,紫色,白色       1
         这里一种类型对应多个属性是一对多的关系,外键写在多的一方
         c.商品 - 属性(goods_attr)
            一个商品对应多种属性,每种属性也被多件商品拥有  所以属性不能单独的存储在商品表中,因为不确定每件商品有多少个属性,反之亦然
            对于这种多对多关系的表,想要存储关联信息,需要建立中间表
          goods_attr_id goods_id attr_id attr_value
            1              1         1       蓝色
         d.商品库存表(goods_number) 用来存储一种商品的某种属性组合的库存量
            比如  苹果6  蓝色款 5.6寸   1000件
            所以有 goods_id  goods_number goods_attr_ids

    ②使用gii生成 attr_type  attribute表代码
        a.属性表中的每个连接都需要带上type_id
        b.属性表中 attr_option_value 中的值用逗号分开,防止输入时错误输入成中文逗号,统一替换成英文逗号
            以防止转化成数组时出错
    ③完成添加商品时,商品属性的添加(重难点)
        a.对制作好的商品属性进行命名
            attr_value['+v.attr_id+'][]
         当已属性id作为表单提交的名字时,一个属性可能会有多个值,所以会造成重名现象,因此要给attr_value的表单提交再增加一维
        最终效果如下
         ["attr_value"] => array(3) {
            [2] => array(3) {
              [0] => string(9) "富士白"
              [1] => string(9) "玫瑰金"
              [2] => string(9) "土豪金"
            }
            [4] => array(1) {
              [0] => string(3) "htc"
            }
            [6] => array(3) {
              [0] => string(3) "ios"
              [1] => string(2) "wp"
              [2] => string(6) "安卓"
            }
          }
         c.完成商品属性的入库,以及将type_id添加到goods表中
            问题:为什么商品属性和商品直接关联,而不是商品属性分类和商品属性直接关联????????????????????????????????????????????????
         d.完成edit界面,商品属性的修改 (重点是:商品属性id不能随意修改,因为其关系到库存量)
            所以商品修改时对商品属性的削减没办法通过,清空所有数据重新插入来实现,因此删除已经存在的属性时要一条一条的删除
            并且删除商品属性时,要去库存量表删除拥有该属性的对应库存量记录
           ①完成表单的制作
           ②使用ajax实现动态删除,当点击减号的时候删除属性的时候,应该判断一下当前的属性是否是原来数据库中已经拥有的
            可以通过是否拥有goods_attr_id来判断, 这个属性如果直接写在 select节点中的话,以后提交的时候就无法得到了,因此最好写在一个隐藏域中
            每个li都应该包含一个拥有 goods_attr_id的隐藏域,方便修改后的商品属性数据的维护
            克隆的时候要注意去除掉隐藏域中的值,以便区分
            注意:删除商品属性的同时,删除库存表中包含该属性的库存数量
             问题: 当新添加了一键商品属性时,在修改表单中无法显示,只显示已经添加过的商品属性????????????????????????????????????????
             解决: 以属性表为主导  所有的商品属性都可以取出来,对left join的理解, ON条件后面是对生成的临时表的限制
                   可以有多个连表条件,(左表的每条记录对应整个右表)满足条件的,关联两张表取出来放在第一条记录中,不满足条件
                   则把左表中的字段取出来,右表取NULL,放在临时表的一条记录中.
                   ----------------连表时一定要指明取出的字段,否则外联时两个表中相同的字段同时取出会造成数据混乱
           ③完成修改商品的插入更新数据库
              关键:
                $model->execute("REPLACE INTO `wwh_goods_attr` VALUES('$goods_attr_id[$i]',$goods_id,$k,'$v1')");
                //新添加的数据主键为空,为确保每个字段都有值,所以主键处要增加单引号,否则报错, 当然,即使主键是字符串格式依旧可以识别
                $model->execute("REPLACE INTO wwh_goods_attr VALUES('23',90,6,'wc');");

              replace插入数据时,数据库中已经存在则更新该数据,否则插入该数据. 判断依据 主键是否存在!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


        补充: 删除商品时同时删除该商品对应的属性,和该商品对应的库存量

    ④商品库存管理
      入口是 商品lst的操作区添加一个库存管理 goodsNum
      一个表单展示即可,并没有特意的删除, 只有一个提交,包括了添加,修改和删除
      a.得到数据,并处理, 已goods_attr为主表,attribute为副表外联,选取attr_type为 可选 的goods_attr值
      b.二维数组处理成三维数组,把相同的attr_name归到一起,方便循环
          array(2) {
            ["颜色"] => array(2) {
              [0] => array(5) {
                ["goods_attr_id"] => string(1) "9"
                ["goods_id"] => string(2) "88"
                ["attr_id"] => string(1) "2"
                ["attr_value"] => string(9) "土豪金"
                ["attr_name"] => string(6) "颜色"
              }
              [1] => array(5) {
                ["goods_attr_id"] => string(2) "10"
                ["goods_id"] => string(2) "88"
                ["attr_id"] => string(1) "2"
                ["attr_value"] => string(9) "富士白"
                ["attr_name"] => string(6) "颜色"
              }
            }
            ["操作系统"] => array(2) {
              [0] => array(5) {
                ["goods_attr_id"] => string(2) "12"
                ["goods_id"] => string(2) "88"
                ["attr_id"] => string(1) "6"
                ["attr_value"] => string(3) "ios"
                ["attr_name"] => string(12) "操作系统"
              }
              [1] => array(5) {
                ["goods_attr_id"] => string(2) "13"
                ["goods_id"] => string(2) "88"
                ["attr_id"] => string(1) "6"
                ["attr_value"] => string(6) "安卓"
                ["attr_name"] => string(12) "操作系统"
              }
            }
          }
      c.制作好一行即可,然后加入jquery事件
      d.得到提交的表单进行数据库的入库操作
        array(2) {
          ["goods_attr_ids"] => array(8) {
            [0] => string(1) "9"
            [1] => string(2) "12"
            [2] => string(2) "10"
            [3] => string(2) "13"
            [4] => string(1) "9"
            [5] => string(2) "12"
            [6] => string(2) "10"
            [7] => string(2) "13"
          }
          ["goods_number"] => array(4) {
            [0] => string(2) "53"
            [1] => string(2) "53"
            [2] => string(2) "53"
            [3] => string(2) "53"
          }
        }
      e.库存提交机制是 提交之前先清空原来该商品的库存,然后把现在的表单提交
      d.如果该商品已经存在库存量,则直接展示
        //selected默认值的问题 ,
        //$v1['goods_attr_id'] == 此次应该出现的值  $value['goods_attr_ids'],这是一个字符串,应该转化成数组
        $goods_attr_ids = explode(',',$value['goods_attr_ids']);
        //此次应该出现的值, 比如颜色, 而$goods_attr_ids中的值比如 9,13 其实只有一个代表颜色属性,另外一个是其他属性,所以
        //只要判断当前出现的id是否在 $goods_attr_ids这个数组中即可
        if(in_array($v1['goods_attr_id'],$goods_attr_ids) ){
            $selected="selected='selected'";
        }else{
            $selected='';
        }

        注意清空 使用jquery克隆时要清空 value和select值
        问题: 如果原来数据库中没有数据,则一行数据都没有,默认显示一行初始值
        解决: //如果$data为空,则前台一条数据都不显示, 要求为空时至少显示一条数据
                  if(empty($data)){
                      $data[] = 1; //塞一条假数据撑起循环
                  }

    /**************************************第五天,商品模块完成!!!!!!!!*******************************************/


十.RABC------基于角色的访问控制
    ①建表
        权限表(无限递归) 中间表 角色表 中间表 管理员表(自带一个超级管理员,不可删除)
    ②代码生成器生成主表代码
        a.可以生成无限递归模式,需要注意的是,表的字段的取名, 父类id一定要为parent_id
        b.需求:修改密码时,如果密码为空则不修改密码
        c.注意：save方法的返回值是影响的记录数，如果返回false则表示更新出错，因此一定要用恒等来判断是否更新失败。
        d.增删改之前的钩子方法中一般保存的是即将影响数据库的数据, 而如果将某个字段的数据删除,则不对该数据进行添加或者修改
        e.超级管理员不能删除 , 超级管理的id永远为0
           表单界面没有删除按钮
           删除之前的钩子函数中进行id判断
        f.问题:模型删除时,$model->delete(0) 为0时判断为空或者假,不会识别成主键id,造成传递的id=0时数据删除失败,切无提示??????????????
          解决:将删除的记录条件写在 where中或 $model->delete("0") 加上引号 ,这里要修改gii,所以使用第二种方法,方便修改
          注意:双引号内部不解析函数 因此delete方法中应该这样写: $model->delete("".I('get.admin_id')."")
    ③角色和权限的表间关系  -- D('authority')->getTree() 可以获得无限分类数据
      a.jquery事件 View/Role/add&edit
        注意: jquery的大括号 { 的后面不能直接加东西,注释都不行,会出现类似smarty模板一样的错误

        关键:对jq中each()的理解
            1.在函数内部使用return false是跳出function;
            2.在each的回调函数中使用return false,是跳出each循环;
            3.可以使用break.
            4.使用return true或return,相当于continue. 即跳出本次循环进入下一次循环

        问题: 寻找父级节点的关键是 只能有一个父级  ->  而prevAll会找出所有的长辈 (查找当前元素之前所有的同辈元素)?
        解决: each循环找到第一个需要的元素节点时,改变判断条件  实例如下:
                //选中 当前选中元素的所有父元素(同一类型中的元素)
                $(this).prevAll(':checkbox').each(function (k,v) {
                    //k是索引,从0开始  v是所有满足prevAll条件的dom对象
                    //当前level需要大于选中的level才被选中
                    if( $(v).attr('level') < level ){ //level数字越小等级越高
                        $(v).prop('checked',bool); //将找到的复选框勾选
                        level--; //将寻找等级提升一级
                    }

                })
      b.完成添加入库及修改界面
      c.role的lst界面展示权限信息 连 role_auth  authority 表
        多对多展示的核心sql语句
            SELECT
            	a.*, group_concat(c.auth_name) auth_name

            FROM
            	wwh_role a
            LEFT JOIN wwh_role_auth b ON a.role_id = b.role_id
            LEFT JOIN wwh_authority c ON b.auth_id = c.auth_id
            GROUP BY
            	a.role_id
            LIMIT 0,
             20
      d.删除角色时,删除中间表中,该角色的信息

    ④管理员和角色的标间关系
      a.添加管理员和修改时选择对应的角色
      b.lst列表展示对应角色信息,类似于角色表中显示角色信息
      c.删除管理员时,删除中间表中该管理员的信息


 十一.登录界面制作
    ①创建控制器  复习命名空间
       a.载入模板,修改样式
       b.模板中显示验证码,验证码标示,是用户在调用$Verify->entry();可以传递的值,增加验证码的安全性
        问题: /* dump($this->data);die; //模型中通过create方法创建的数据,在模型中调用$data中包含有 用户名信息和密码,不包括验证码 ,这是为什么????????????????????
                *array(2) {
                     ["admin_name"] => string(3) "123"
                     ["password"] => string(4) "1234"}*/
        解决:$data数组中只收集数据库中的字段
       c.验证码输出不显示,在验证码方法 captcha中输出验证码之前 加上 ob_clean(); 清空缓冲区中的数据,这样就可以保证验证码输出之前没有其他数据的输出
       d.表单数据的收集
         tp中通常有两种方法
          1.M()->data(); //效率高,但是不会对表单数据进行验证处理,有待了解
          2.D('表名')->create(); // 功能全面,安全性高,但是要牺牲掉一定的效率
            通常写法   $model->create(I('post.'),int 收集的数据类型)  使用I函数可以过滤掉 < 等html标签
            create的第二个参数 1是增加 2是更新 默认会自动判断, 但通常自己定义,防止误判
            该方法创建的数据对象存储在$model->data 这个数据中,其中只保存该模型对应表中的字段,比如验证码就不会被收集
            create支持连贯操作,可以进行接收字符串的选择,自定义动态验证等
          3.登陆验证通常在 后台管理员模型中完成,包括验证码的验证等在自动验证中完成
            $model->create(I('post.'),4) 第二个参数适用自定义字符,在后台的$_validate属性中的
            array('captcha', 'checkCaptcha', '验证码错误！', 1, 'callback',4),最后一个参数验证时间相对应
          4.登陆账号密码的验证中同样在Admin模型中完成(验证完成后记得将ID和用户名存储在session中),返回一个bool给控制器判断即可
            注意:业务逻辑通常在模型中完成,如果该控制器没有对应的模型(因为模型通常对应表),那可以写在和该控制器实现功能最相似的模型中
    ②限制未登陆的用户登陆后台 --在Base控制器中完成 root为0,判断的时候记得考虑0的情况
    ③根据权限限制可访问的界面  -->业务逻辑和权限有关,因此在权限模型中定义方法完成
    ④左侧菜单栏 只显示拥有的前两级权限即 level_id为0和1的
        a.根据当前登陆的管理员制作一个嵌套数组外层为顶级权限 顶级权限中增加一个child字段,用来保存二级权限 -->依旧在auth模型中制作
            问题:当一个角色拥有两种权限时,可能会拥有一个共同的顶级权限,造成嵌套数组制作失败,
            解决:给最外层的数组(顶级权限)的key值手动规定,已顶级权限的id作为键值,这样就不会有重复的顶级权限
    ⑤退出系统的制作
        a.做到业务逻辑写在admin模型中,控制器中只完成简单的判断跳转
        b.控制器的redirect方法和redirect函数的区别在于前者是用URL规则定义跳转地址，后者是一个纯粹的URL地址。
        前者类似于U()函数

/******************************************第六天,后台完成!!!************************************************************/





                      前台界面的制作
     分析: 前台的功能大概分成几类, 商品模块(主页,列表页,详情页)  登录模块(登录,注册,QQ登录接口等)  订单模块
     所以初步的思路是,每个模块对应一个控制器,每个方法对应一个界面,比如主页就是 index方法,商品页是goods方法
     当然也有没有对应模板页的方法,比如ajax获取数据, 前后台公用的模型全都在后台模型中完成

一.完成前台的配置
  A.布局界面的制作(所有界面公共的部分)--页头和页脚 通用js   在界面中的引入方法 <layout name="Common/layout"/> layout后面不能加后缀
  B.多次使用到的地方制作成模板页,比如头部导航栏(搜索框,logo框,分类导航条)和底部导航栏,他们只是在商品界面和订单界面处拥有,因此制作
    成模板页在需要的地方引入  <include file="Common/topnav"/> topnav的后面不能加后缀,总之tp中使用标签引入静态文件不需要加后缀

  C.通用变量的分配  商城首页为 $index=1 其余为$index=0
  D.导航条的制作 --> 属于商品分类,因此在后台分类模型中增加一个前台导航条的方法
    ①创建一个导航条类,需要导航条的地方继承该类即可,在导航条类中已经完成了数据分配给模板的使用
    ②因为导航条经常使用,并且数据量巨大,所以将导航条数据放入到缓存中去,已减轻服务器的负担
  E.首页商品抢购.热卖.推荐商品的制作
    ①在商品表中添加字段
      促销价格 promote_price
      促销开始时间 promote_start_date
      促销结束时间 promote_end_date
      是否热卖 is_hot
      是否精品 is_best
      是否新品  is_new
      排序字段  sort_num
    ②维护商品的增加和修改表单
    ③在商品模型中添加方法, 分别有 获得促销.热卖.推荐(精品).新品方法
  F. 首页中间大类楼层的数据 -> 在goodsModel中完成
    ①首先商品表中添加字段,是否推荐到楼层,并完善模板界面
    ②分类是否推荐到楼层(顶级分类推荐决定楼层,二级分类推荐决定左侧边栏和右主要区,二级分类推荐到楼层最好不要超过5个)
    ③取数据->在商品模型中完成
        注意:注意:前台调用goods模型中的getGoodsIds方法时,方法中D('category')的在前台被实例化,而前台没有category这个模型,所以需要加上Admin来指向后台
    ④给每个楼层制作一个推荐商品栏的商品数组,保存在第一维循环的数据
    ⑤完成品牌旗舰店模块 ->数据属于当前顶级分类
     1.找出当前顶级分类下的所有商品id,然后连接品牌表,根据品牌id分组,最后取出的字段有 - brand_id brand_name logo
        由于这里有些商品没有品牌,或者品牌没有图片,所以这里已品牌表为主表,并且判断当前品牌Logo是否存在
    ⑥主页页面静态化,并解决缓存失效时并发时造成的崩溃问题
     1.在配置文件中配置缓存
     2.在判断缓存是否失效时, 如果缓存失效,则加上一个文件锁,只让一个人通过下面的代码
        a.再次进行判断缓存是否有效
        b.生成界面缓存
  G.商品详情页的制作
    ①制作面包屑导航
                       固定格式> 顶级分类> 二级分类>商品名称
                        首页>电脑,办公>笔记本电脑>thinkpap5.2.3
        a.跟分类有关,在分类模型中创建方法 getCat12($goods_id) 根据商品id寻找顶级分类和二级分类
        问题: 在getCat12中使用 array_merge()方法合并的数组最后为0
        解决: 找到数据之后继续查找然后继续查找返回,中间少了存储的过程, 该递归的正确过程应该是 匹配->存储->匹配(递归)
    ②商品详情页静态化
    ③制作最近浏览过的商品, 使用ajax实现局部不缓存
        思路:数据id存储在cookie中,这样关闭打开浏览器依旧有数据缓存存在,cookie数据存储在客户端(这里不考虑ip)
            该功能 属于ajax方法,需要直接访问控制器中的方法,因此在Index控制器中创建一个 ajaxZuijin()方法
        关键:
        ①这里的cookie方法使用原生的,而不使用tp封装的----原因待定,大概时函数的实参是一个函数时不能被解析
         $goods_ids = isset($_COOKIE['history_id'])?unserialize($_COOKIE['history_id']):array();
         //存回cookie中这里时间如果是0则关闭浏览器失效 如果小于当前当前时间戳则马上失效
         cookie中只能存储字符串,如果想要存储数组则需要序列化和反序列化
                 setcookie('history_id',serialize($goods_ids),time()+86400);
        ②ajax回调函数中拼接字符串时
               //读取浏览器中图片的根目录,保证数据的灵活性
               <?php $imgConfig = C('IMAGE_CONFIG');?>
               var viewPath = '<?php echo $imgConfig['viewPath']?>';
/***********************************第七天,商品首页完成***************************************************/

A.商品详情页完整信息的获取
    基础信息
    商品相册的获取
    商品属性的获取(因为数据需要经过二次处理,所以在goods模型中完成)
    会员价格的获取
C.前台登录注册的制作(代码类似于后台)
    ①建表
      --会员表(类似于Admin表)
    ②创建控制器和模型(暂时定在前台)
    ③完成注册,登录操作
    ④由于页面静态化所以使用ajax在布局页头上显示登录状态
D.根据当前浏览用户计算实时价格,
  买个浏览者登录或是没登陆,有会员和没会员查看时价格都不同，
  所以需要实时计算，所以需要使用AJAX实现局部不缓存！
  总结:静态化界面中实时变化的部分,都使用ajx实现局部不缓存
  ①在用户登录后计算出用户的实际购买价格 会员级别id->存到session中
   使用到的sql语句
   SELECT `member_price` FROM `wwh_member_price` WHERE `goods_id` = '88' AND `level_id` = '4'
   或
   SELECT `member_price` FROM `wwh_member_price` WHERE `goods_id` = '88' AND `level_id` = null;
   这条语句匹配到0条数据

E.购物车的制作
    分析:用户没有登录则把购物车信息保存在cookie中
        商品id - 商品属性id(多个) - - 购买数量  单价(实时计算)
        由于需要一个特殊的需求-如果cookie中已经存在这个属性的这件商品,要做的应该是shop_number的叠加操作,
        所以需要对数组的goods_id和goods_attr_id进行匹配,但二维数组非常难匹配,所以把商品信息存成一维数组
        更加容易匹配
            格式    key:['goods_id-goods_attr_id'] => value:shop_number;

    如果用户登录了则存到数据库中
    建表 --cart
    cart_id  member_id goods_id goods_attr_id shop_number
    创建购物车控制器和模型
  ①第一个动作,用户在商品详情页点击加入购物车提交表单到 Cart模型中的add方法
    a.任何表单在加入数据库之前都要进行验证操作  ->  这里需要验证的有,如果商品有属性要验证用户是否选择了商品属性,库存量等
      包括商品数量需要大于1   (原则是: 表单是可以伪造的)
    b.重写add方法,即加入数据库之前先判断用户是否登录
        思考:第一次加入购物车时,判断了库存量是否充足,再次加入同一件商品时依旧判断库存量是否充足,但是当两次库存量叠加时
            没有判断库存量是否充足
        解决: 1.两次相同商品进行库存叠加时进行一次库存判断? (这里暂时选择这种方式)
              2.每次加入购物车都对库存量进行一个削减?
              3.在实际购买时进行库存量判断?
              4.在购物车列表,进行ajax实时库存量判断(最友好的方式)

    c.用户登录了之后,把cookie中数据,和数据库中的数据进行一个合并,并清空cookie
      初步打算:在登录成功的模型中完成,那里取cookie等数据比较方便
      二次打算:由于cart模型中的add方法已经被重写,所以无法调用,在购物车模型中完成
      (推荐使用二次打算,因为其中可以方便的进行库存验证,和调用未被重写的add方法)
    遇到cookie数据的取出问题,待定
  ②购物车的列表展示页面
    如果用户没有登录则在cookie中取得数据进行遍历,如果用户登录了则在数据库中取得数据进行遍历
    在cart模型中封装一个得到购物车数据的函数 getCart
  ③在页面的右上角使用ajax实现购物车的实时显示
/***********************************第八天任务完成**********************************************/

A.订单页面的制作
  结构分析---首先制作一个订单表 ,包括一个订单的基本信息
    收货人,所在省,所在市,所在区,详细地址手机号码,支付方式(默认在线支付)
    订单信息:在购物车表中,用户的每一个订单都有一个订单id,包括商品属性,和购买数量,但是由于每次购买完毕都需要清空购买的商品,并且购买完毕后
    的商品价格也需要保存
    思路一:给购物车表增加2个字段,一个用来记录,每件商品的单价,一个用来记录支付状态,如果已经支付成功则把支付状态设置为1,表示已经支付
            则在用户的购物车界面不显示该商品, 而订单信息表中,只需要增加一个cart_id字段,用来保存每个订单中的商品即可~
    思路二: 在订单基本信息和商品之间构建一个中间表,用来保存订单中的商品,将购物车中的商品转移到中间表来,每保存一件商品,就删除购物车中对应的商品
  ①创建控制器和模型,在模型中完成自动验证,在add方法中展示表单等,后台需要维护订单,因此该表的模型创建在后台
    注意: 使用a标签点击出发表单的提交时,要先阻止a标签的跳转事件,  <a href='javascript:void(0)'></a>
  ②在插入的钩子函数中对两张表中的数据进行维护,插入完数据库记得要清空购物车中的数据
  ③防止高并发->加锁(读库存之前加锁,下单完毕库存减少之后解锁), 防止出现中途失败造成数据混乱->加实务
    待完善:订单表中增加订单号,订单名称
C.并发测试代码
    -c 20 -n 20 -C "PHPSESSID=g3vuh47n4aiknip461cbk0cf65" -p U:\php\phpstudy\WWW\wwh_shop\post_data.txt -T "application/x-www-form-urlencoded" http://www.web.com/wwh_shop/index.php/Home/Order/add.html
    实验结果: 未加锁的情况下数据库中的库存并没有产生并发错误,分析原因:tp运行速度慢,而没有产生并发错误,tp内部已经预防了并发

    启用事务的方法:(在要对数据库中的重要数据进行增删改之前启动事务)
            启动事务：$User->startTrans();
             提交事务：$User->commit();
             事务回滚： $User->rollback();
D.集成支付宝接口
  支付宝建立请求原理
  //建立请求
  $alipaySubmit = new AlipaySubmit($alipay_config);
  $html_text = $alipaySubmit->buildRequestForm($parameter,"get", "确认");
  echo $html_text;
  ①$parameter,是上面进行的配置,包括订单信息,名称等,buildRequestForm方法将这些信息阻止成一个表单,
   包括提交按钮,并且继承了一段script代码用来提交这个表单(无事件,读取到该js代码就跳转到支付宝界面),
   然后将这串代码输出到html界面后即刻跳转到支付界面,当然及时注释掉自动跳转方法,在html界面依旧无法显示支付按钮
   因为按钮的样式 为 display:none ;即不会显示
   可以看出来,该接口并不希望我们已这样的方式手动提交表单,(视频里老师采用修改支付宝接口中的按钮,并删除了表单自动提交)
   这里我使用,使用一个方法集成这个支付宝跳转,在需要的地方调用这个方法即可
E.个人中心系列制作,这里只完成我的订单
   ①暂时无需建表,所以直接创建控制器,添加方法,载入模板
    模板左侧menu菜单因为个人中心中的界面都需要用到,因此独立出来,在需要的地方引入
   ②分页取出数据  ->在order模型中建立一个search方法得到订单数据,在My/order中调用该否方法即可
                    group_concat(DISTINCT c.sm_goods_img) sm_goods_img
                     group_concat: 将组中字段中的数据全部取出,默认已逗号分隔,可以修改
                     DISTINCT  去除重复的字段
   ③个人中心的一系列操作加上登录验证,因此在个人中心的控制器中的构造方法中设置登录验证();
   ⑤未付款统计
/***************************************第九天任务完成*******************************************************************/

        列表页的制作
A.创建控制器,操作方法,载入模板
   ①根据分类筛选商品方法  catList()
   ②创建入口,三级菜单栏加上U函数
   ②根据cat_id已分页形式取出商品(无筛选)
   ③根据取出的商品的制作制作出筛选条件栏目 condition:条件
    筛选条件的效果仿京东
    并在前后台的公用函数库中封装了一条函数 fieldUrl($gerKey),用来对url中的$gerKey比如 brand_name进行删除操作
B.根据cat_id初步查找商品,然后再根据get参数对商品进行筛选 -> getGoodsByCatId
    ①brand_name和price字段只需要对goods表进行简单的where查找即可
    ②属性字段则不方便使用连表查询,因为总的记录数也是根据 $where条件查找出来的,如果使用连表查询需要两处连表,
     效率不高,因此我们这里采用子查询,根据attr属性和goods_ids在goods_attr表中查出a_goods_id,然后再传给给筛选商品以及求出商品数量,商品ids中
     用到的 $where['a.goods_id'] =array('IN',$a_goods_id);
C.排序制作 -> 首先制作,默认已销量从高到低排序 ->getGoodsByCatId中的去商品数据
   ①销量排序 思路: 给order_goods表中添加goods_number字段,以便计算销量
     a.在表单页面制作排序按钮
     b.后台接收order字段,进行排序制作
D.根据用户输入的搜索条件Key初步查找商品,然后再根据get参数对商品进行筛选 -> getGoodsByKey
    代码类似于 getGoodsByCatId,进行简单的修改即可
   ①key表单修改,原来是已表单方式提交,但表单方式提交不方便组织URL的形式,因此我们这里采用自己的方式,尤其是表单使用post方式提交是会有刷新障碍
    注意:表单中的method不填写时,默认为get方式,
    问题:浏览器会绑定为form表单中的文本框绑定回车键提交表单事件
    解决:
                        为表单中的文本框添加键盘按下事件,如果按下的键盘是回车键则:
                        if(event.keyCode == 13){
                           event.preventDefault();
                           window.location.href = '<?php echo U('List/keyList','',FALSE);?>/key/'+$('#key').val();
                       }
    注意点!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! $goods_ids = (string)$goods['goods_ids']; 一定要这样设置接收的goods_id,防止null的出现
    因为在数据库中搜索null字段会报错


/*************************************第十天任务完成************************************************************/

 完成商品评论区的制作 -> 该界面有缓存,所以用ajax制作
  html->  Home\View\Index\goods.html
  初步 -> 建表  主评论表  ->  对应回复表  ->商品印象表
A.提交评论操作
  1.  收集表单->ajax提交->后台验证和入库->返回结果(成功返回刚刚插入的数据)->前台现拼接一条评论(动画效果)
      !!!!!!!!!!!!!!!老规矩,jquer中的 {  }中间不能直接贴着字符,注视都不可以,一定要加空格,或者回车!!!!!!!!!!!!!!!!!!!!!
      jquery理解:
      ①append追加后的html代码 ---变成了什么?还存在吗?
      ②append(这里可以是html代码也可以是jq对象)
      ③$('这里可以直接写多个匹配条件,中间紧挨着,则匹配的元素必须同时满足这些条件')
  2.ajax登录制作,并在 goods界面中定义一个全局变量记录登录状态
    ①判断是否需要登录 ->在public目录中引入弹出窗口插件
    ②member控制器中的登陆方法并没有设置ajax但是使用ajax去调用的时候,却自动转换成了ajax的格式
    ③评论列表页,ajax翻页制作
    ④好评率和商品印象制作

/**************************************第十一天任务完成********************************/

A.
    sphinx配置
    1. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!请不要再用记事本去编辑你的文件了!!!!!!!!!!!!!!!!其会自动将文件保存成utf-8 bom的格式,造成难以发现的调试 错误
    2.在模型中进行修改时一定要注意钩子函数,很容易造成死循环
    3.新增商品由于没有建立索引,无法搜出来, 被修改了的数据,由于没有新的索引无法搜索出来,所以现在建立增量索引
        具体配置请读根目录下的 sphinx.conf

    //主索引操作
    E:\coreseek-3.2.14-win32\bin\indexer.exe -c E:\coreseek-3.2.14-win32\sphinx.conf goods

    E:\coreseek-3.2.14-win32\bin\searchd.exe -c E:\coreseek-3.2.14-win32\sphinx.conf --install


    //增量索引操作 ,索引具有覆盖行为
    E:\coreseek-3.2.14-win32\bin\indexer.exe -c E:\coreseek-3.2.14-win32\sphinx.conf new_goods

    E:\coreseek-3.2.14-win32\bin\indexer.exe -c  E:\coreseek-3.2.14-win32\sphinx.conf --marge goods new_goods --merge-dst-range is_update 0 0 --rotate


B.集成qq登录接口


C.在lnmp环境中上线
    A.创建linux主机(centos 7.2)
       1.关闭防火墙
       2.设置上网
    B.lnmp环境搭建   在有网环境中www.lnmp.org中的一键环境集成安装
        1.安装
        2.设置在php.ini 设置支持pathinfo路由
        3.设置nginx配置文件,开启pathinfo路由模式,并设置好本来服务器地址,域名等 (因为这是集成环境,因此配置方法,请在该集成包所在论坛寻找,不要在网上找些乱七八糟的)
        4.把项目放进主目录中,linux严格区分大小写,一定要十分注意




